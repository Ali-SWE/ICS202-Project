# Efficiency Text File #

This project is about a dictionary that allows users to do different operations such as adding, deleting, and searching. A suitable data structure that has been used is AVL tree because it balances itself after inserting, deleting, or searching for a node. As a result, these operations' complexities are O(logn). 


The Complexity of Each Method:

1. { Dictionary() } => Creating an empty dictionary costs O(1)

2. { Dictionary(String s) } => Creating a dictionary containing single word is O(1)

3. { Dictionary(File f) } =>  Traversing on the words in the file and then use the insert avl algorithm costs O(nlogn)

4. { addWord(String s) } =>  O(log n) -> Insertion in AVL Tree is O(log n)

5. { deleteWord(String s) } =>  O(log n) -> Deletion in AVL Tree is O(log n)

6. { findWord(String s) } => O(log n) -> Searching in AVL Tree is O(log n) since AVL trees are always balanced

7. { findSimilar(String s) } => O(n) -> Since they go over all elements in the AVL Tree

8. { saveFile(String fileName) & writeDictionaryInFile(BTNode node,PrintWriter writer) } => O(n) ->
Since they go over all elements in the AVL Tree

